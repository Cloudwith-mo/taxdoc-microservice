#!/usr/bin/env python3
"""
Test AI Insights with Sample Image
Uses a real sample image to test the complete pipeline
"""
import json
import base64
import requests
import sys
import os

def test_with_sample_image():
    """Test AI insights with a sample W-2 image"""
    
    API_ENDPOINT = "https://fzgyzpo535.execute-api.us-east-1.amazonaws.com/mvp/process-document"
    
    # Look for sample images
    sample_paths = [
        "images/W2-sample.png",
        "images/1099-sample.png",
        "images/w2.gif",
        "images/sample-invoive.jpeg"
    ]
    
    sample_file = None
    for path in sample_paths:
        if os.path.exists(path):
            sample_file = path
            break
    
    if not sample_file:
        print("❌ No sample image found")
        print("Please add a W-2 sample image to the images/ directory")
        return False
    
    print("🧪 Testing AI Insights with Sample Image")
    print("=========================================")
    print(f"API Endpoint: {API_ENDPOINT}")
    print(f"Sample File: {sample_file}")
    print("")
    
    try:
        # Read and encode image
        with open(sample_file, 'rb') as f:
            image_data = f.read()
        
        encoded_image = base64.b64encode(image_data).decode('utf-8')
        
        payload = {
            "filename": os.path.basename(sample_file),
            "file_content": encoded_image
        }
        
        print("📤 Sending request...")
        response = requests.post(
            API_ENDPOINT,
            json=payload,
            headers={'Content-Type': 'application/json'},
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            
            print("✅ API request successful")
            print(f"Document Type: {result.get('document_type', 'Unknown')}")
            
            # Check extracted data
            extracted_data = result.get('extracted_data', {})
            field_count = len([k for k in extracted_data.keys() if not k.startswith('layers_') and k not in ['extraction_method', 'total_fields_extracted']])
            print(f"📊 Fields Extracted: {field_count}")
            
            # Check for AI insights
            ai_insights = result.get('ai_insights')
            
            if ai_insights:
                print("\n🎉 AI Insights Generated!")
                print("=========================")
                
                # Display summary
                if ai_insights.get('summary'):
                    print(f"📝 Summary: {ai_insights['summary']}")
                
                # Display key insights
                if ai_insights.get('insights'):
                    print("\n💡 Key Insights:")
                    for i, insight in enumerate(ai_insights['insights'], 1):
                        print(f"   {i}. {insight}")
                
                # Display metadata
                print(f"\n📊 Metadata:")
                print(f"   Risk Level: {ai_insights.get('risk_level', 'Unknown')}")
                print(f"   Action Required: {'Yes' if ai_insights.get('action_required') else 'No'}")
                print(f"   Generated by: {ai_insights.get('generated_by', 'Unknown')}")
                print(f"   Confidence: {ai_insights.get('confidence', 0):.1%}")
                
                return True
            else:
                print("❌ No AI insights found in response")
                print("\n📋 Full Response Structure:")
                print(json.dumps(result, indent=2))
                return False
                
        else:
            print(f"❌ API request failed: {response.status_code}")
            print(f"Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"❌ Error: {e}")
        return False

if __name__ == "__main__":
    success = test_with_sample_image()
    
    if success:
        print("\n🎉 AI Insights feature is working correctly!")
        print("✅ The system generates comprehensive AI insights for tax documents.")
        print("✅ Web interface should now display the AI-Powered Insights section.")
    else:
        print("\n❌ AI Insights feature needs debugging")
        
    sys.exit(0 if success else 1)