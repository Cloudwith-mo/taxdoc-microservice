#!/usr/bin/env python3

import sys
import os
import json
import base64

# Add src to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from services.three_layer_orchestrator import ThreeLayerOrchestrator
from services.template_service import TemplateService
from services.advanced_template_matcher import AdvancedTemplateMatcher

def test_w2_extraction():
    """Test W-2 extraction with proper formatting"""
    
    print("üß™ Testing W-2 Document Extraction")
    print("=" * 50)
    
    # Read the W-2 sample image
    image_path = "images/W2-sample.png"
    with open(image_path, 'rb') as f:
        document_bytes = f.read()
    
    try:
        # Use the orchestrator directly
        orchestrator = ThreeLayerOrchestrator()
        result = orchestrator.extract_document_fields(document_bytes, "W-2")
        
        print(f"‚úÖ Document Type: {result.get('DocumentType')}")
        print(f"‚úÖ Overall Confidence: {result.get('ExtractionMetadata', {}).get('overall_confidence', 0):.2f}")
        
        extracted_data = result.get('ExtractedData', {})
        
        # Format for frontend compatibility
        field_mapping = {
            'EmployeeName': 'e Employee\'s first name and initial',
            'EmployeeSSN': 'a Employee\'s social security number', 
            'EmployerName': 'c Employer\'s name, address, and ZIP code',
            'EmployerEIN': 'b Employer identification number (EIN)',
            'Box1_Wages': '1 Wages, tips, other compensation',
            'Box2_FederalTaxWithheld': '2 Federal income tax withheld',
            'Box3_SocialSecurityWages': '3 Social security wages',
            'Box4_SocialSecurityTax': '4 Social security tax withheld',
            'Box5_MedicareWages': '5 Medicare wages and tips',
            'Box6_MedicareTax': '6 Medicare tax withheld',
            'TaxYear': 'Tax Year'
        }
        
        formatted_data = {}
        for internal_name, display_name in field_mapping.items():
            if internal_name in extracted_data:
                formatted_data[display_name] = str(extracted_data[internal_name])\n        \n        print(f\"‚úÖ Extracted {len(formatted_data)} W-2 fields:\")\n        for field, value in formatted_data.items():\n            print(f\"   {field}: {value}\")\n        \n        return True, formatted_data\n        \n    except Exception as e:\n        print(f\"‚ùå W-2 extraction failed: {e}\")\n        return False, {}\n\ndef test_template_system():\n    \"\"\"Test template system functionality\"\"\"\n    \n    print(\"\\nüß™ Testing Template System\")\n    print(\"=\" * 50)\n    \n    try:\n        template_service = TemplateService()\n        \n        # Test template creation\n        print(\"üìù Testing template creation...\")\n        \n        sample_template_data = {\n            'keywords': [\n                {'term': 'w-2', 'weight': 2.0, 'required': True},\n                {'term': 'wages', 'weight': 1.5},\n                {'term': 'employer', 'weight': 1.0}\n            ],\n            'structure_patterns': [\n                {'pattern': r'wages.*tips.*compensation', 'field': 'Box1_Wages', 'weight': 1.0},\n                {'pattern': r'federal.*income.*tax', 'field': 'Box2_FederalTax', 'weight': 1.0}\n            ],\n            'sample_texts': ['Sample W-2 form text'],\n            'validation_rules': {\n                'required_elements': [{'pattern': r'w-?2', 'name': 'W-2 identifier'}],\n                'min_confidence': 0.7\n            }\n        }\n        \n        template_id = template_service.create_template(\"W-2\", sample_template_data, \"test_system\")\n        print(f\"‚úÖ Created template: {template_id}\")\n        \n        # Test template retrieval\n        print(\"üìñ Testing template retrieval...\")\n        retrieved_template = template_service.get_template(template_id)\n        \n        if retrieved_template:\n            print(f\"‚úÖ Retrieved template: {retrieved_template['TemplateID']}\")\n            print(f\"   Version: {retrieved_template['Version']}\")\n            print(f\"   Document Type: {retrieved_template['DocumentType']}\")\n        else:\n            print(\"‚ùå Failed to retrieve template\")\n            return False\n        \n        # Test template update (versioning)\n        print(\"üîÑ Testing template versioning...\")\n        updated_data = sample_template_data.copy()\n        updated_data['keywords'].append({'term': 'tax year', 'weight': 1.0})\n        \n        new_version = template_service.update_template(template_id, updated_data, \"test_system\")\n        print(f\"‚úÖ Created new version: {new_version}\")\n        \n        # Test template listing\n        print(\"üìã Testing template listing...\")\n        templates = template_service.list_templates(\"W-2\")\n        print(f\"‚úÖ Found {len(templates)} W-2 templates\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Template system test failed: {e}\")\n        import traceback\n        traceback.print_exc()\n        return False\n\ndef test_template_matching():\n    \"\"\"Test advanced template matching\"\"\"\n    \n    print(\"\\nüß™ Testing Template Matching\")\n    print(\"=\" * 50)\n    \n    try:\n        matcher = AdvancedTemplateMatcher()\n        \n        # Sample document text (from W-2)\n        sample_text = \"\"\"\n        Form W-2 Wage and Tax Statement\n        Employee's name: Jane A DOE\n        Employee's social security number: 123-45-6789\n        Employer's name: The Big Company\n        Wages, tips, other compensation: $48,500.00\n        Federal income tax withheld: $6,835.00\n        Social security wages: $50,000.00\n        \"\"\"\n        \n        # Test template creation from document\n        print(\"üèóÔ∏è Testing template creation from document...\")\n        \n        field_mappings = {\n            'employee_name': r\"Employee's name:\\s*([^\\n]+)\",\n            'employee_ssn': r\"social security number:\\s*([0-9-]+)\",\n            'employer_name': r\"Employer's name:\\s*([^\\n]+)\",\n            'wages': r\"Wages.*compensation:\\s*\\$?([0-9,]+\\.?[0-9]*)\"\n        }\n        \n        template_data = matcher.create_template_from_document(\n            sample_text, \"W-2\", field_mappings\n        )\n        \n        print(f\"‚úÖ Created template with {len(template_data['keywords'])} keywords\")\n        print(f\"‚úÖ Created {len(template_data['structure_patterns'])} structure patterns\")\n        print(f\"‚úÖ Created layout analysis with {len(template_data['layout_patterns'])} patterns\")\n        \n        # Test field pattern matching\n        print(\"üîç Testing field pattern matching...\")\n        \n        matches = matcher.match_field_patterns(sample_text, field_mappings)\n        print(f\"‚úÖ Matched {len(matches)} fields:\")\n        \n        for field, data in matches.items():\n            print(f\"   {field}: {data['value']} (confidence: {data['confidence']:.2f})\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Template matching test failed: {e}\")\n        import traceback\n        traceback.print_exc()\n        return False\n\ndef test_api_response_format():\n    \"\"\"Test API response format compatibility\"\"\"\n    \n    print(\"\\nüß™ Testing API Response Format\")\n    print(\"=\" * 50)\n    \n    try:\n        # Simulate the API response format\n        sample_extracted_data = {\n            'EmployeeName': 'Jane A DOE',\n            'EmployeeSSN': '123-45-6789',\n            'EmployerName': 'The Big Company',\n            'EmployerEIN': '11-2233445',\n            'Box1_Wages': 48500.0,\n            'Box2_FederalTaxWithheld': 6835.0,\n            'Box3_SocialSecurityWages': 50000.0,\n            'Box4_SocialSecurityTax': 3100.0,\n            'Box5_MedicareWages': 50000.0,\n            'Box6_MedicareTax': 725.0,\n            'TaxYear': 2014\n        }\n        \n        # Format for frontend (as done in enhanced_api_handler.py)\n        field_mapping = {\n            'EmployeeName': 'e Employee\\'s first name and initial',\n            'EmployeeSSN': 'a Employee\\'s social security number', \n            'EmployerName': 'c Employer\\'s name, address, and ZIP code',\n            'EmployerEIN': 'b Employer identification number (EIN)',\n            'Box1_Wages': '1 Wages, tips, other compensation',\n            'Box2_FederalTaxWithheld': '2 Federal income tax withheld',\n            'Box3_SocialSecurityWages': '3 Social security wages',\n            'Box4_SocialSecurityTax': '4 Social security tax withheld',\n            'Box5_MedicareWages': '5 Medicare wages and tips',\n            'Box6_MedicareTax': '6 Medicare tax withheld',\n            'TaxYear': 'Tax Year'\n        }\n        \n        formatted_data = {}\n        for internal_name, display_name in field_mapping.items():\n            if internal_name in sample_extracted_data:\n                formatted_data[display_name] = str(sample_extracted_data[internal_name])\n        \n        # Create API response\n        api_response = {\n            \"DocumentID\": \"W2-sample.png\",\n            \"DocumentType\": \"W-2\",\n            \"ProcessingStatus\": \"Completed\",\n            \"Data\": formatted_data,\n            \"S3Location\": \"\",\n            \"CreatedAt\": \"2025-01-05T05:58:03.198753\"\n        }\n        \n        print(\"‚úÖ API Response Format:\")\n        print(json.dumps(api_response, indent=2))\n        \n        # Verify expected fields are present\n        expected_fields = [\n            '1 Wages, tips, other compensation',\n            '2 Federal income tax withheld',\n            'a Employee\\'s social security number',\n            'b Employer identification number (EIN)'\n        ]\n        \n        missing_fields = [f for f in expected_fields if f not in formatted_data]\n        \n        if not missing_fields:\n            print(f\"‚úÖ All expected fields present ({len(formatted_data)} total)\")\n            return True\n        else:\n            print(f\"‚ùå Missing fields: {missing_fields}\")\n            return False\n        \n    except Exception as e:\n        print(f\"‚ùå API format test failed: {e}\")\n        return False\n\ndef main():\n    \"\"\"Run all tests\"\"\"\n    \n    print(\"üöÄ DrDoc Complete System Test\")\n    print(\"=\" * 60)\n    \n    tests = [\n        (\"W-2 Extraction\", test_w2_extraction),\n        (\"Template System\", test_template_system),\n        (\"Template Matching\", test_template_matching),\n        (\"API Response Format\", test_api_response_format)\n    ]\n    \n    results = []\n    \n    for test_name, test_func in tests:\n        try:\n            success = test_func()\n            results.append((test_name, success))\n        except Exception as e:\n            print(f\"‚ùå {test_name} failed with exception: {e}\")\n            results.append((test_name, False))\n    \n    # Summary\n    print(\"\\n\" + \"=\" * 60)\n    print(\"üìä TEST SUMMARY\")\n    print(\"=\" * 60)\n    \n    passed = 0\n    for test_name, success in results:\n        status = \"‚úÖ PASS\" if success else \"‚ùå FAIL\"\n        print(f\"{status} {test_name}\")\n        if success:\n            passed += 1\n    \n    print(f\"\\nüéØ Overall: {passed}/{len(results)} tests passed\")\n    \n    if passed == len(results):\n        print(\"\\nüéâ All tests passed! System is ready for deployment.\")\n        return True\n    else:\n        print(f\"\\n‚ö†Ô∏è  {len(results) - passed} test(s) failed. Please review the errors above.\")\n        return False\n\nif __name__ == \"__main__\":\n    success = main()\n    sys.exit(0 if success else 1)"