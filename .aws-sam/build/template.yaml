AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: TaxDoc V1 MVP - Simple tax document extraction for W-2 and 1099 forms
Parameters:
  Environment:
    Type: String
    Default: mvp
    Description: Environment name
Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.9
Resources:
  TaxDocBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: taxdoc-uploads-${Environment}-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
        - Id: DeleteTempFiles
          Status: Enabled
          ExpirationInDays: 1
  DocumentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: DrDocDocuments-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: document_id
        AttributeType: S
      KeySchema:
      - AttributeName: document_id
        KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
  TaxProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: TaxDoc-Processor-${Environment}
      CodeUri: TaxProcessorFunction
      Handler: handlers/tax_mvp_handler.lambda_handler
      Environment:
        Variables:
          DOCUMENTS_TABLE:
            Ref: DocumentsTable
      Policies:
      - TextractPolicy: {}
      - S3ReadPolicy:
          BucketName:
            Ref: TaxDocBucket
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DocumentsTable
      - Statement:
        - Effect: Allow
          Action:
          - bedrock:InvokeModel
          - bedrock:ListFoundationModels
          Resource:
          - arn:aws:bedrock:us-east-1::foundation-model/us.anthropic.claude-3-5-sonnet-20241022-v2:0
          - Fn::Sub: arn:aws:bedrock:us-east-1:${AWS::AccountId}:*
      Events:
        ProcessDocument:
          Type: Api
          Properties:
            RestApiId:
              Ref: TaxDocApi
            Path: /process-document
            Method: post
        OptionsRequest:
          Type: Api
          Properties:
            RestApiId:
              Ref: TaxDocApi
            Path: /process-document
            Method: options
    Metadata:
      SamResourceId: TaxProcessorFunction
  AnalyticsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: TaxDoc-Analytics-${Environment}
      CodeUri: AnalyticsFunction
      Handler: handlers/analytics_handler.lambda_handler
      Environment:
        Variables:
          DOCUMENTS_TABLE:
            Ref: DocumentsTable
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: DocumentsTable
      - CloudWatchReadOnlyAccess
      Events:
        GetAnalytics:
          Type: Api
          Properties:
            RestApiId:
              Ref: TaxDocApi
            Path: /analytics
            Method: get
        AnalyticsOptions:
          Type: Api
          Properties:
            RestApiId:
              Ref: TaxDocApi
            Path: /analytics
            Method: options
    Metadata:
      SamResourceId: AnalyticsFunction
  ChatbotFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: TaxDoc-Chatbot-${Environment}
      CodeUri: ChatbotFunction
      Handler: handlers/chatbot_handler.lambda_handler
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - bedrock:InvokeModel
          - bedrock:ListFoundationModels
          Resource:
          - arn:aws:bedrock:us-east-1::foundation-model/us.anthropic.claude-3-5-sonnet-20241022-v2:0
          - Fn::Sub: arn:aws:bedrock:us-east-1:${AWS::AccountId}:*
      Events:
        ChatbotPost:
          Type: Api
          Properties:
            RestApiId:
              Ref: TaxDocApi
            Path: /chat
            Method: post
        ChatbotOptions:
          Type: Api
          Properties:
            RestApiId:
              Ref: TaxDocApi
            Path: /chat
            Method: options
    Metadata:
      SamResourceId: ChatbotFunction
  TaxDocApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: TaxDoc-API-${Environment}
      StageName:
        Ref: Environment
      Cors:
        AllowMethods: '''GET, POST, OPTIONS'''
        AllowHeaders: '''Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-Security-Token'''
        AllowOrigin: '''*'''
      DefinitionBody:
        swagger: '2.0'
        info:
          title: TaxDoc MVP API
          version: '1.0'
        paths:
          /chat:
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: Success
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatbotFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: Success
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
          /analytics:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: Success
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AnalyticsFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: Success
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
          /process-document:
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: Success
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TaxProcessorFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: Success
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
  ApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: TaxProcessorFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TaxDocApi}/*/*
  AnalyticsApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: AnalyticsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TaxDocApi}/*/*
  ChatbotApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: ChatbotFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TaxDocApi}/*/*
  TaxProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/TaxDoc-Processor-${Environment}
      RetentionInDays: 7
  AnalyticsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/TaxDoc-Analytics-${Environment}
      RetentionInDays: 7
  ChatbotLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/TaxDoc-Chatbot-${Environment}
      RetentionInDays: 7
Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${TaxDocApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiEndpoint
  BucketName:
    Description: S3 bucket for uploads
    Value:
      Ref: TaxDocBucket
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-BucketName
  FunctionName:
    Description: Lambda function name
    Value:
      Ref: TaxProcessorFunction
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-FunctionName
