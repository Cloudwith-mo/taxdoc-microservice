AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: TaxDoc Document Ingestion Microservice

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]

Globals:
  Function:
    Timeout: 300
    Runtime: python3.9
    Environment:
      Variables:
        UPLOAD_BUCKET: !Ref DocumentUploadBucket
        RESULTS_TABLE: !Ref DocumentsTable
        TEXTRACT_SNS_TOPIC: !Ref TextractCompleteTopic
        TEXTRACT_ROLE_ARN: !GetAtt TextractSNSRole.Arn
        COMPREHEND_ENDPOINT: ''
        COMPREHEND_CONFIDENCE_THRESHOLD: '0.8'
        BEDROCK_MODEL_ID: 'anthropic.claude-sonnet-4-20250514-v1:0'
        ENABLE_BEDROCK_SUMMARY: 'true'
        ENABLE_W2_AI_EXTRACTION: 'true'

Resources:
  # S3 Bucket for document uploads
  DocumentUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'taxdoc-uploads-${Environment}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # DynamoDB table for document metadata
  DocumentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'TaxDocuments-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: DocumentID
          AttributeType: S
        - AttributeName: DocumentType
          AttributeType: S
      KeySchema:
        - AttributeName: DocumentID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: DocumentTypeIndex
          KeySchema:
            - AttributeName: DocumentType
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # SNS Topic for Textract completion notifications
  TextractCompleteTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-textract-complete'

  # IAM Role for Textract to publish to SNS
  TextractSNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-TextractSNSRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: textract.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref TextractCompleteTopic

  # Lambda function for document processing
  ProcessDocumentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'TaxDoc-ProcessDocument-${Environment}'
      CodeUri: ../src/
      Handler: handlers.process_document.lambda_handler
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DocumentUploadBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentsTable
        - Statement:
            - Effect: Allow
              Action:
                - textract:DetectDocumentText
                - textract:AnalyzeDocument
                - textract:AnalyzeExpense
                - textract:StartDocumentTextDetection
                - textract:StartDocumentAnalysis
                - textract:GetDocumentTextDetection
                - textract:GetDocumentAnalysis
              Resource: '*'
            - Effect: Allow
              Action:
                - comprehend:ClassifyDocument
                - bedrock:InvokeModel
                - bedrock:InvokeModelWithResponseStream
                - bedrock:ListFoundationModels
                - bedrock:GetFoundationModel
              Resource: 
                - 'arn:aws:bedrock:*::foundation-model/anthropic.claude*'
                - 'arn:aws:bedrock:*::foundation-model/amazon.titan*'
                - 'arn:aws:bedrock:*:*:foundation-model/*'
                - 'arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
                - 'arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  # Permission for S3 to invoke Lambda
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProcessDocumentFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::taxdoc-uploads-${Environment}-${AWS::AccountId}/*'

  # Lambda function for processing Textract results
  TextractResultProcessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'TaxDoc-TextractResult-${Environment}'
      CodeUri: ../src/
      Handler: handlers.textract_result_handler.lambda_handler
      Timeout: 600
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DocumentUploadBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentsTable
        - Statement:
            - Effect: Allow
              Action:
                - textract:GetDocumentAnalysis
                - textract:GetDocumentTextDetection
                - textract:GetExpenseAnalysis
              Resource: '*'
            - Effect: Allow
              Action:
                - comprehend:ClassifyDocument
                - bedrock:InvokeModel
                - bedrock:InvokeModelWithResponseStream
                - bedrock:ListFoundationModels
                - bedrock:GetFoundationModel
              Resource: 
                - 'arn:aws:bedrock:*::foundation-model/anthropic.claude*'
                - 'arn:aws:bedrock:*::foundation-model/amazon.titan*'
                - 'arn:aws:bedrock:*:*:foundation-model/*'
                - 'arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
                - 'arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref TextractCompleteTopic



  # API Gateway for synchronous processing
  DocumentProcessingApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'POST, GET, OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"

  # Lambda function for API processing
  ApiProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'TaxDoc-ApiProcess-${Environment}'
      CodeUri: ../src/
      Handler: handlers.api_handler.lambda_handler
      Events:
        ProcessDocument:
          Type: Api
          Properties:
            RestApiId: !Ref DocumentProcessingApi
            Path: /process-document
            Method: post
        GetResult:
          Type: Api
          Properties:
            RestApiId: !Ref DocumentProcessingApi
            Path: /result/{doc_id}
            Method: get
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DocumentUploadBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentsTable
        - Statement:
            - Effect: Allow
              Action:
                - textract:DetectDocumentText
                - textract:AnalyzeDocument
                - textract:AnalyzeExpense
                - textract:StartDocumentTextDetection
                - textract:StartDocumentAnalysis
                - textract:GetDocumentTextDetection
                - textract:GetDocumentAnalysis
              Resource: '*'
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  # Lambda function for Excel generation
  ExcelGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'TaxDoc-ExcelGenerator-${Environment}'
      CodeUri: ../src/
      Handler: handlers.excel_generator.lambda_handler
      Timeout: 60
      Events:
        DownloadExcel:
          Type: Api
          Properties:
            RestApiId: !Ref DocumentProcessingApi
            Path: /download-excel/{doc_id}
            Method: get
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref DocumentUploadBucket
        - DynamoDBReadPolicy:
            TableName: !Ref DocumentsTable
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

Outputs:
  UploadBucket:
    Description: S3 bucket for document uploads
    Value: !Ref DocumentUploadBucket
    Export:
      Name: !Sub '${AWS::StackName}-UploadBucket'

  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${DocumentProcessingApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  DocumentsTable:
    Description: DynamoDB table for document metadata
    Value: !Ref DocumentsTable
    Export:
      Name: !Sub '${AWS::StackName}-DocumentsTable'

  TextractSNSTopic:
    Description: SNS topic for Textract completion notifications
    Value: !Ref TextractCompleteTopic
    Export:
      Name: !Sub '${AWS::StackName}-TextractSNSTopic'