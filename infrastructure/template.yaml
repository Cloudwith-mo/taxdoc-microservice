AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: TaxDoc Document Ingestion Microservice

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]

Globals:
  Function:
    Timeout: 300
    Runtime: python3.9
    Environment:
      Variables:
        UPLOAD_BUCKET: !Ref DocumentUploadBucket
        RESULTS_TABLE: !Ref DocumentsTable
        TEXTRACT_SNS_TOPIC: !Ref TextractCompleteTopic
        TEXTRACT_ROLE_ARN: !GetAtt TextractSNSRole.Arn
        COMPREHEND_ENDPOINT: ''
        COMPREHEND_CONFIDENCE_THRESHOLD: '0.8'
        BEDROCK_MODEL_ID: 'us.anthropic.claude-sonnet-4-20250514-v1:0'
        ENABLE_BEDROCK_SUMMARY: 'true'
        ENABLE_W2_AI_EXTRACTION: 'true'
        PROCESSING_QUEUE_URL: !Ref DocumentProcessingQueue
        CLAUDE_DAILY_LIMIT: '50'
        TEXTRACT_DAILY_LIMIT: '30'
        _X_AMZN_TRACE_ID: !Ref 'AWS::NoValue'

Resources:
  # SQS Queue for document processing
  DocumentProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'DrDoc-Processing-${Environment}'
      VisibilityTimeout: 900
      MessageRetentionPeriod: 1209600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DocumentProcessingDLQ.Arn
        maxReceiveCount: 3

  # Dead Letter Queue for failed processing
  DocumentProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'DrDoc-Processing-DLQ-${Environment}'
      MessageRetentionPeriod: 1209600

  # S3 Bucket for document uploads
  DocumentUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'drdoc-uploads-${Environment}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: AbortIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
          - Id: DeleteOriginalDocuments
            Status: Enabled
            ExpirationInDays: 30
            Prefix: uploads/



  # DynamoDB table for document metadata
  DocumentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'DrDocDocuments-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: DocumentID
          AttributeType: S
        - AttributeName: DocumentType
          AttributeType: S
      KeySchema:
        - AttributeName: DocumentID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: DocumentTypeIndex
          KeySchema:
            - AttributeName: DocumentType
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # SNS Topic for Textract completion notifications
  TextractCompleteTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-textract-complete'

  # IAM Role for Textract to publish to SNS
  TextractSNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-TextractSNSRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: textract.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref TextractCompleteTopic

  # Lambda function for document processing
  ProcessDocumentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'DrDoc-ProcessDocument-${Environment}'
      CodeUri: ../src/
      Handler: handlers.process_document.lambda_handler
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DocumentUploadBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentsTable
        - Statement:
            - Effect: Allow
              Action:
                - textract:DetectDocumentText
                - textract:AnalyzeDocument
                - textract:AnalyzeExpense
                - textract:StartDocumentTextDetection
                - textract:StartDocumentAnalysis
                - textract:GetDocumentTextDetection
                - textract:GetDocumentAnalysis
              Resource: '*'
            - Effect: Allow
              Action:
                - comprehend:ClassifyDocument
                - bedrock:InvokeModel
                - bedrock:InvokeModelWithResponseStream
                - bedrock:ListFoundationModels
                - bedrock:GetFoundationModel
              Resource: 
                - 'arn:aws:bedrock:*::foundation-model/anthropic.claude*'
                - 'arn:aws:bedrock:*::foundation-model/amazon.titan*'
                - 'arn:aws:bedrock:*:*:foundation-model/*'
                - 'arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
                - 'arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  # S3 Ingest Lambda - queues documents for processing
  S3IngestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'DrDoc-S3Ingest-${Environment}'
      CodeUri: ../src/
      Handler: handlers.s3_ingest.lambda_handler
      Environment:
        Variables:
          PROCESSING_QUEUE_URL: !Ref DocumentProcessingQueue
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DocumentProcessingQueue.QueueName

  # SQS Processor Lambda - processes documents from queue
  SQSProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'DrDoc-SQSProcessor-${Environment}'
      CodeUri: ../src/
      Handler: handlers.sqs_processor.lambda_handler
      Timeout: 900
      Tracing: Active
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DocumentProcessingQueue.Arn
            BatchSize: 1
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DocumentUploadBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentsTable
        - Statement:
            - Effect: Allow
              Action:
                - textract:AnalyzeDocument
                - textract:StartDocumentAnalysis
                - textract:GetDocumentAnalysis
                - bedrock:InvokeModel
              Resource: '*'

  # Permission for S3 to invoke S3 Ingest Lambda
  S3InvokeIngestPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref S3IngestFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::drdoc-uploads-${Environment}-${AWS::AccountId}'

  # Lambda function for processing Textract results
  TextractResultProcessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'DrDoc-TextractResult-${Environment}'
      CodeUri: ../src/
      Handler: handlers.textract_result_handler.lambda_handler
      Timeout: 600
      Tracing: Active
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DocumentUploadBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentsTable
        - Statement:
            - Effect: Allow
              Action:
                - textract:GetDocumentAnalysis
                - textract:GetDocumentTextDetection
                - textract:GetExpenseAnalysis
              Resource: '*'
            - Effect: Allow
              Action:
                - comprehend:ClassifyDocument
                - bedrock:InvokeModel
                - bedrock:InvokeModelWithResponseStream
                - bedrock:ListFoundationModels
                - bedrock:GetFoundationModel
              Resource: 
                - 'arn:aws:bedrock:*::foundation-model/anthropic.claude*'
                - 'arn:aws:bedrock:*::foundation-model/amazon.titan*'
                - 'arn:aws:bedrock:*:*:foundation-model/*'
                - 'arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
                - 'arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref TextractCompleteTopic



  # API Gateway for synchronous processing
  DocumentProcessingApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'POST, GET, OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 20

  # API Gateway Usage Plan
  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub 'DrDoc-UsagePlan-${Environment}'
      Description: 'Usage plan for Dr.Doc API'
      Throttle:
        BurstLimit: 100
        RateLimit: 20
      Quota:
        Limit: 5000
        Period: DAY
      ApiStages:
        - ApiId: !Ref DocumentProcessingApi
          Stage: !Ref Environment

  # API Key
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub 'DrDoc-ApiKey-${Environment}'
      Description: 'API Key for Dr.Doc'
      Enabled: true

  # Usage Plan Key
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  # Enhanced API Lambda with three-layer processing
  EnhancedApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'DrDoc-EnhancedApi-${Environment}'
      CodeUri: ../src/
      Handler: handlers.enhanced_api_handler.lambda_handler
      Timeout: 300
      Tracing: Active
      Events:
        ProcessDocument:
          Type: Api
          Properties:
            RestApiId: !Ref DocumentProcessingApi
            Path: /process-document
            Method: post
        GetResult:
          Type: Api
          Properties:
            RestApiId: !Ref DocumentProcessingApi
            Path: /result/{doc_id}
            Method: get
        DownloadExcel:
          Type: Api
          Properties:
            RestApiId: !Ref DocumentProcessingApi
            Path: /download-excel/{doc_id}
            Method: get
        SupportedTypes:
          Type: Api
          Properties:
            RestApiId: !Ref DocumentProcessingApi
            Path: /supported-types
            Method: get
        Options:
          Type: Api
          Properties:
            RestApiId: !Ref DocumentProcessingApi
            Path: /{proxy+}
            Method: options
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref DocumentUploadBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentsTable
        - Statement:
            - Effect: Allow
              Action:
                - textract:DetectDocumentText
                - textract:AnalyzeDocument
                - bedrock:InvokeModel
                - cloudwatch:PutMetricData
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
              Resource: '*'



Outputs:
  UploadBucket:
    Description: S3 bucket for document uploads
    Value: !Ref DocumentUploadBucket
    Export:
      Name: !Sub '${AWS::StackName}-UploadBucket'

  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${DocumentProcessingApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  DocumentsTable:
    Description: DynamoDB table for document metadata
    Value: !Ref DocumentsTable
    Export:
      Name: !Sub '${AWS::StackName}-DocumentsTable'

  TextractSNSTopic:
    Description: SNS topic for Textract completion notifications
    Value: !Ref TextractCompleteTopic
    Export:
      Name: !Sub '${AWS::StackName}-TextractSNSTopic'

  ProcessingQueue:
    Description: SQS queue for document processing
    Value: !Ref DocumentProcessingQueue
    Export:
      Name: !Sub '${AWS::StackName}-ProcessingQueue'

  ApiKey:
    Description: API Gateway API Key
    Value: !Ref ApiKey
    Export:
      Name: !Sub '${AWS::StackName}-ApiKey'

  UsagePlan:
    Description: API Gateway Usage Plan
    Value: !Ref ApiUsagePlan
    Export:
      Name: !Sub '${AWS::StackName}-UsagePlan'